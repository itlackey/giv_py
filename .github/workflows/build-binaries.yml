name: Build Binaries

on:
  workflow_call:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        type: string

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux
            arch: x86_64
            runner: ubuntu-latest
            target: linux-x86_64
          - platform: linux
            arch: arm64
            runner: ubuntu-latest
            target: linux-arm64
          - platform: macos
            arch: x86_64
            runner: macos-13
            target: macos-x86_64
          - platform: macos
            arch: arm64
            runner: macos-latest
            target: macos-arm64
          - platform: windows
            arch: x86_64
            runner: windows-latest
            target: windows-x86_64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev build-essential
        # Install cross-compilation tools for ARM64
        if [[ "${{ matrix.arch }}" == "arm64" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
    
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Configure build environment
      shell: bash
      run: |
        # Set cross-compilation environment for Linux ARM64
        if [[ "${{ matrix.platform }}" == "linux" && "${{ matrix.arch }}" == "arm64" ]]; then
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
        fi
        
        poetry --version
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      shell: bash
      run: poetry install --no-interaction --no-ansi
    
    - name: Ensure scripts are installed
      shell: bash
      run: poetry install --only-root --no-interaction --no-ansi

    - name: Build binary
      shell: bash
      run: poetry run build-binary
    
    - name: Rename binary to match target
      shell: bash
      run: |
        echo "Contents of dist/ after build:"
        ls -la dist/
        
        # Find the binary that was actually created
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          BUILT_BINARY=$(find dist/ -name "giv-*.exe" -type f | head -1)
          TARGET_BINARY="dist/giv-${{ matrix.target }}.exe"
        else
          BUILT_BINARY=$(find dist/ -name "giv-*" -type f -not -name "*.sha256" | head -1)
          TARGET_BINARY="dist/giv-${{ matrix.target }}"
        fi
        
        if [[ -z "$BUILT_BINARY" ]]; then
          echo "ERROR: No binary found after build"
          exit 1
        fi
        
        echo "Found built binary: $BUILT_BINARY"
        echo "Target binary name: $TARGET_BINARY"
        
        # Rename if different
        if [[ "$BUILT_BINARY" != "$TARGET_BINARY" ]]; then
          echo "Renaming binary to match target"
          mv "$BUILT_BINARY" "$TARGET_BINARY"
        fi
        
        echo "Final contents of dist/:"
        ls -la dist/
    
    - name: Test binary
      shell: bash
      run: |
        echo "Matrix target: ${{ matrix.target }}"
        echo "Matrix platform: ${{ matrix.platform }}"
        echo "Contents of dist/:"
        ls -la dist/
        
        # Find the actual binary that was created
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          EXPECTED_BINARY="dist/giv-${{ matrix.target }}.exe"
        else
          EXPECTED_BINARY="dist/giv-${{ matrix.target }}"
        fi
        
        echo "Looking for expected binary: $EXPECTED_BINARY"
        
        # Check if expected binary exists
        if [[ -f "$EXPECTED_BINARY" ]]; then
          BINARY_PATH="$EXPECTED_BINARY"
        else
          # Try to find any giv binary in dist/
          echo "Expected binary not found, looking for any giv binary..."
          BINARY_PATH=$(find dist/ -name "giv-*" -type f | head -1)
          if [[ -z "$BINARY_PATH" ]]; then
            echo "ERROR: No giv binary found in dist/"
            exit 1
          fi
          echo "Found binary: $BINARY_PATH"
        fi
        
        # Make executable if not Windows
        if [[ "${{ matrix.platform }}" != "windows" ]]; then
          chmod +x "$BINARY_PATH"
        fi
        
        # Test binary exists and is executable
        if [[ ! -f "$BINARY_PATH" ]]; then
          echo "ERROR: Binary not found at $BINARY_PATH"
          exit 1
        fi
        
        echo "Testing binary: $BINARY_PATH"
        
        # Basic functionality test (skip for cross-compiled ARM64)
        if [[ "${{ matrix.arch }}" != "arm64" || "${{ matrix.platform }}" != "linux" ]]; then
          "$BINARY_PATH" --version
        else
          echo "Skipping execution test for cross-compiled ARM64 binary"
        fi
    
    - name: Generate checksums
      shell: bash
      run: |
        cd dist
        echo "Contents of dist/:"
        ls -la
        
        # Use cross-platform checksum command
        if command -v sha256sum >/dev/null 2>&1; then
          CHECKSUM_CMD="sha256sum"
        elif command -v shasum >/dev/null 2>&1; then
          CHECKSUM_CMD="shasum -a 256"
        else
          echo "Error: No checksum command available"
          exit 1
        fi
        
        # Find the binary that was created and generate checksum
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          EXPECTED_BINARY="giv-${{ matrix.target }}.exe"
        else
          EXPECTED_BINARY="giv-${{ matrix.target }}"
        fi
        
        if [[ -f "$EXPECTED_BINARY" ]]; then
          echo "Generating checksum for: $EXPECTED_BINARY"
          $CHECKSUM_CMD "$EXPECTED_BINARY" > "$EXPECTED_BINARY.sha256"
        else
          # Find any giv binary and generate checksum
          BINARY_FILE=$(find . -name "giv-*" -type f -not -name "*.sha256" | head -1)
          if [[ -n "$BINARY_FILE" ]]; then
            BINARY_FILE=${BINARY_FILE#./}  # Remove leading ./
            echo "Generating checksum for found binary: $BINARY_FILE"
            $CHECKSUM_CMD "$BINARY_FILE" > "$BINARY_FILE.sha256"
          else
            echo "ERROR: No binary found to generate checksum"
            exit 1
          fi
        fi
        
        echo "Generated checksums:"
        ls -la *.sha256
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: giv-${{ matrix.target }}
        path: |
          dist/giv-${{ matrix.target }}*
        retention-days: 30
    
    - name: Create release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/giv-${{ matrix.target }}*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}