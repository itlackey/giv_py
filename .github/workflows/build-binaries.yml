name: Build Binaries

on:
  workflow_call:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        type: string

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux
            arch: x86_64
            runner: ubuntu-latest
            target: linux-x86_64
          - platform: linux
            arch: arm64
            runner: ubuntu-latest
            target: linux-arm64
          - platform: macos
            arch: x86_64
            runner: macos-13
            target: macos-x86_64
          - platform: macos
            arch: arm64
            runner: macos-latest
            target: macos-arm64
          - platform: windows
            arch: x86_64
            runner: windows-latest
            target: windows-x86_64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev build-essential
        # Install cross-compilation tools for ARM64
        if [[ "${{ matrix.arch }}" == "arm64" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
    
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Configure build environment
      shell: bash
      run: |
        # Set cross-compilation environment for Linux ARM64
        if [[ "${{ matrix.platform }}" == "linux" && "${{ matrix.arch }}" == "arm64" ]]; then
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
        fi
        
        poetry --version
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      shell: bash
      run: poetry install --no-interaction --no-ansi
    
    - name: Ensure scripts are installed
      shell: bash
      run: poetry install --only-root --no-interaction --no-ansi

    - name: Build binary
      shell: bash
      run: poetry run build-binary
    
    - name: Test binary
      shell: bash
      run: |
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          BINARY_PATH="dist/giv-${{ matrix.target }}.exe"
        else
          BINARY_PATH="dist/giv-${{ matrix.target }}"
          chmod +x "$BINARY_PATH"
        fi
        
        # Test binary exists and is executable
        if [[ ! -f "$BINARY_PATH" ]]; then
          echo "ERROR: Binary not found at $BINARY_PATH"
          ls -la dist/
          exit 1
        fi
        
        # Basic functionality test (skip for cross-compiled ARM64)
        if [[ "${{ matrix.arch }}" != "arm64" || "${{ matrix.platform }}" != "linux" ]]; then
          "$BINARY_PATH" --version
        else
          echo "Skipping execution test for cross-compiled ARM64 binary"
        fi
    
    - name: Generate checksums
      shell: bash
      run: |
        cd dist
        # Use cross-platform checksum command
        if command -v sha256sum >/dev/null 2>&1; then
          CHECKSUM_CMD="sha256sum"
        elif command -v shasum >/dev/null 2>&1; then
          CHECKSUM_CMD="shasum -a 256"
        else
          echo "Error: No checksum command available"
          exit 1
        fi
        
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          $CHECKSUM_CMD "giv-${{ matrix.target }}.exe" > "giv-${{ matrix.target }}.exe.sha256"
        else
          $CHECKSUM_CMD "giv-${{ matrix.target }}" > "giv-${{ matrix.target }}.sha256"
        fi
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: giv-${{ matrix.target }}
        path: |
          dist/giv-${{ matrix.target }}*
        retention-days: 30
    
    - name: Create release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/giv-${{ matrix.target }}*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}